{{- define "haproxy-ingress.controller.podTemplate" -}}
metadata:
  annotations:
{{- if .Values.controller.template }}
    checksum/config: {{ include (print $.Template.BasePath "/controller-template.yaml") . | sha256sum }}
{{- end }}
{{- if .Values.controller.podAnnotations }}
    {{- toYaml .Values.controller.podAnnotations | nindent 4 }}
{{- end }}
  labels:
    {{- include "haproxy-ingress.selectorLabels" . | nindent 4 }}
{{- if .Values.controller.podLabels }}
    {{- toYaml .Values.controller.podLabels | nindent 4 }}
{{- end }}
spec:
{{- if .Values.controller.podAffinity }}
  affinity:
    {{- toYaml .Values.controller.podAffinity | nindent 4 }}
{{- end }}
  serviceAccountName: {{ include "haproxy-ingress.serviceAccountName" . }}
{{- if .Values.controller.initContainers }}
  initContainers:
    {{- toYaml .Values.controller.initContainers | nindent 4 }}
{{- end }}
  containers:
    - name: haproxy-ingress
      image:  "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.image.pullPolicy }}"
      args:
        - --configmap={{ .Release.Namespace }}/{{ include "haproxy-ingress.fullname" . }}
        - --ingress-class={{ .Values.controller.ingressClass }}
        - --sort-backends
{{- if .Values.controller.tcp }}
        - --tcp-services-configmap={{ .Release.Namespace }}/{{ include "haproxy-ingress.fullname" . }}-tcp
{{- end }}
{{- if or .Values.defaultBackend.enabled .Values.controller.defaultBackendService }}
        - --default-backend-service={{ if .Values.defaultBackend.enabled }}{{ .Release.Namespace }}/{{ include "haproxy-ingress.defaultBackend.fullname" . }}{{ else }}{{ .Values.controller.defaultBackendService }}{{ end }}
{{- end }}
{{- range $key, $value := .Values.controller.extraArgs }}
  {{- if $value }}
        - --{{ $key }}={{ $value }}
  {{- else }}
        - --{{ $key }}
  {{- end }}
{{- end }}
      ports:
{{- if .Values.controller.enableStaticPorts }}
        - name: http
          containerPort: 80
  {{- if and (eq .Values.controller.kind "DaemonSet") .Values.controller.daemonset.useHostPort .Values.controller.daemonset.hostPorts.http }}
          hostPort: {{ .Values.controller.daemonset.hostPorts.http }}
  {{- end }}
        - name: https
          containerPort: 443
  {{- if and (eq .Values.controller.kind "DaemonSet") .Values.controller.daemonset.useHostPort .Values.controller.daemonset.hostPorts.https }}
          hostPort: {{ .Values.controller.daemonset.hostPorts.https }}
  {{- end }}
{{- end }}
{{- if and .Values.controller.metrics.enabled .Values.controller.metrics.embedded }}
        - name: metrics
          containerPort: {{ .Values.controller.metrics.port }}
          protocol: TCP
{{- end }}
{{- if .Values.controller.stats.enabled }}
        - name: stats
          containerPort: {{ .Values.controller.stats.port }}
          protocol: TCP
{{- end }}
        - name: healthz
          containerPort: {{ .Values.controller.healthzPort }}
{{- range $key, $value := .Values.controller.tcp }}
        - name: "{{ $key }}-tcp"
          containerPort: {{ $key }}
          protocol: TCP
  {{- if and (eq $.Values.controller.kind "DaemonSet") $.Values.controller.daemonset.useHostPort }}
    {{- range $p := $.Values.controller.daemonset.hostPorts.tcp }}
      {{- if eq $key $p }}
          hostPort: {{ $key }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
      livenessProbe:
        httpGet:
          path: {{ .Values.controller.livenessProbe.path | quote }}
          port: {{ .Values.controller.livenessProbe.port }}
          scheme: HTTP
        initialDelaySeconds: {{ .Values.controller.livenessProbe.initialDelaySeconds }}
        periodSeconds: {{ .Values.controller.livenessProbe.periodSeconds }}
        timeoutSeconds: {{ .Values.controller.livenessProbe.timeoutSeconds }}
        successThreshold: {{ .Values.controller.livenessProbe.successThreshold }}
        failureThreshold: {{ .Values.controller.livenessProbe.failureThreshold }}
      readinessProbe:
        httpGet:
          path: {{ .Values.controller.readinessProbe.path | quote }}
          port: {{ .Values.controller.readinessProbe.port }}
          scheme: HTTP
        initialDelaySeconds: {{ .Values.controller.readinessProbe.initialDelaySeconds }}
        periodSeconds: {{ .Values.controller.readinessProbe.periodSeconds }}
        timeoutSeconds: {{ .Values.controller.readinessProbe.timeoutSeconds }}
        successThreshold: {{ .Values.controller.readinessProbe.successThreshold }}
        failureThreshold: {{ .Values.controller.readinessProbe.failureThreshold }}
      env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
{{- if .Values.controller.extraEnvs }}
        {{- toYaml .Values.controller.extraEnvs | nindent 8 }}
{{- end }}
{{- if .Values.controller.template }}
      volumeMounts:
        - name: haproxy-template
          mountPath: /etc/haproxy/template
{{- end }}
      resources:
        {{- toYaml .Values.controller.resources | nindent 8 }}
{{- if .Values.controller.lifecycle }}
      lifecycle:
        {{- toYaml .Values.controller.lifecycle | nindent 8 }}
{{- end }}
{{- if .Values.controller.logs.enabled }}
    - name: access-logs
      image:  "{{ .Values.controller.logs.image.repository }}:{{ .Values.controller.logs.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.logs.image.pullPolicy }}"
      ports:
        - name: udp
          containerPort: 514
          protocol: UDP
{{- if .Values.controller.logs.extraVolumeMounts }}
      volumeMounts:
        {{- toYaml .Values.controller.logs.extraVolumeMounts | nindent 8 }}
{{- end }}
      resources:
        {{- toYaml .Values.controller.logs.resources | nindent 8 }}
{{- end }}
{{- if and .Values.controller.stats.enabled .Values.controller.metrics.enabled (not .Values.controller.metrics.embedded) }}
    - name: prometheus-exporter
      image:  "{{ .Values.controller.metrics.image.repository }}:{{ .Values.controller.metrics.image.tag }}"
      imagePullPolicy: "{{ .Values.controller.metrics.image.pullPolicy }}"
      args:
        - '--haproxy.scrape-uri=http://localhost:{{ .Values.controller.stats.port }}/haproxy?stats;csv'
        - --web.listen-address=:{{ .Values.controller.metrics.port }}
  {{- range $key, $value := .Values.controller.metrics.extraArgs }}
    {{- if $value }}
        - --{{ $key }}={{ $value }}
    {{- else }}
        - --{{ $key }}
    {{- end }}
  {{- end }}
      ports:
        - name: metrics
          containerPort: {{ .Values.controller.metrics.port }}
          protocol: TCP
      livenessProbe:
        httpGet:
          path: /
          port: metrics
      resources:
        {{- toYaml .Values.controller.metrics.resources | nindent 8 }}
{{- end }}
{{- if .Values.controller.imagePullSecrets }}
  imagePullSecrets:
    {{- toYaml .Values.controller.imagePullSecrets | nindent 4 }}
{{- end }}
{{- if .Values.controller.template }}
  volumes:
    - name: haproxy-template
      configMap:
        name: {{ include "haproxy-ingress.fullname" . }}-template
{{- end }}
  terminationGracePeriodSeconds: {{ .Values.controller.terminationGracePeriodSeconds }}
  dnsPolicy: {{ .Values.controller.dnsPolicy }}
  hostNetwork: {{ .Values.controller.hostNetwork }}
{{- if .Values.controller.nodeSelector }}
  nodeSelector:
    {{- toYaml .Values.controller.nodeSelector | nindent 4 }}
{{- end }}
{{- if .Values.controller.tolerations }}
  tolerations:
    {{- toYaml .Values.controller.tolerations | nindent 4 }}
{{- end }}
{{- if .Values.controller.affinity }}
  affinity:
    {{- toYaml .Values.controller.affinity | nindent 4 }}
{{- end }}
{{- if .Values.controller.priorityClassName }}
  priorityClassName: {{ .Values.controller.priorityClassName | quote }}
{{- end }}
{{- if .Values.controller.securityContext }}
  securityContext:
    {{- toYaml .Values.controller.securityContext | nindent 4 }}
{{- end }}
{{- end }}
